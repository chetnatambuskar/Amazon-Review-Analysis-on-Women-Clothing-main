# -*- coding: utf-8 -*-
"""Amazon Review Analysis_WomenClothing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/151b-N4RXGN5IWWQJog_yEi9NCrgIaMFO
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive/')
# %cd /gdrive

ls

cd/gdrive/MyDrive/Amazon Review/

ls

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
from plotly.subplots import make_subplots
plt.style.use('ggplot')
import warnings as w
w.filterwarnings(action='ignore')

"""### generally analysis in review data and I analyzed whether the recommenedation system of large companies like Amazon is performing well."""

df = pd.read_csv('/gdrive/MyDrive/Amazon Review/Women Dresses Reviews Dataset .csv')
df.head()

df.rename(columns={'recommend_index':'recommened'},inplace=True)

df.division_name.value_counts()

"""### total dataset is 23486 rows and 11 columns

### Feature Explain
 - s_no: index
 - division_name: Division of the Cloth customer has bought
 - department name: Large category(top,bottom)
 - class name: small category(jeans, blouses)
 - title: 리뷰 제목 review_title
 - review_text: review contents
 - alike_feedback_count : same or similar feedback count
 - rating: 평점, same feature
 - recommend_index: the presence or absence of recommendations

# EDA
"""

df.isna().sum()

df.title.fillna('None',inplace=True)
df.review_text.fillna('None',inplace=True)
df.dropna(inplace=True)

df.info()

df.isna().sum()

df.head()

"""## rating"""

df.rating.value_counts().plot(kind='bar',figsize=(10,8))

"""**bold text**# Age"""

print('max_age:',df.age.max())
print('min_age:',df.age.min())

df.age.value_counts().plot(kind='bar',figsize=(15,10))

"""### Costomers age is between 18 ~ 99
### I think grouping age is more effective, So I process age categorizing
"""

df['age_group'] = pd.qcut(df.age,q=6,labels=['18~29','30~39','40~49','50~59','60~69','70+'])

df.age_group.value_counts().plot(kind='bar',figsize=(10,8))

"""### rating over 3 = positive
### raing under 3 or equals = negative 
"""

rating_group = []
for rating in df.rating:
    if rating >= 4:
        rating_group.append('positive')
    else:
        rating_group.append('negative')

df['rating_group'] = rating_group

df.rating_group.value_counts().plot(kind='bar')
print(df.rating_group.value_counts())

plt.figure(figsize=(10,8))
sns.countplot(x='age_group',hue='rating_group',palette=['#7777DD','#CC6666'],data=df)

df.head()

df[df.age_group == '18~29'].class_name.value_counts(ascending=True).plot.barh(figsize=(10,8),title='18~29 age')
plt.show()

df[df.age_group == '30~39'].class_name.value_counts(ascending=True).plot.barh(figsize=(10,8),title='30~39 age')
plt.show()

df[df.age_group == '40~49'].class_name.value_counts(ascending=True).plot.barh(figsize=(10,8),title='40~49 age')
plt.show()

df[df.age_group == '50~59'].class_name.value_counts(ascending=True).plot.barh(figsize=(10,8),title='50~59 age')
plt.show()

df[df.age_group == '60~69'].class_name.value_counts(ascending=True).plot.barh(figsize=(10,8),title='60~69 age')
plt.show()

df[df.age_group == '70+'].class_name.value_counts(ascending=True).plot.barh(figsize=(10,8),title='70+ age')
plt.show()

"""### Age 18 ~ 29"""

age_18_29 = df[df.age_group == '18~29']

age_18_29.rating_group.value_counts().plot(kind='bar')

plt.figure(figsize=(20,10))
sns.countplot(x='class_name',hue='rating_group',palette=['#7777DD','#CC6666'],data=age_18_29)

"""### Dresses"""

plt.figure(figsize=(20,10))
sns.countplot(x='class_name',hue='rating_group',palette=['#7777DD','#CC6666'],data=age_18_29[age_18_29.rating < 5])

"""### Normalization
### negative score

### Age 30~39
"""

age_30_39 = df[df.age_group == '30~39']

age_30_39.rating_group.value_counts().plot(kind='bar')
plt.show()

plt.figure(figsize=(20,10))
plt.title('Age 30~39')
sns.countplot(x='class_name',hue='rating_group',palette=['#7777DD','#CC6666'],data=age_30_39)
plt.show()

"""### Age 40~49"""

age_40_49 = df[df.age_group == '40~49']

age_40_49.rating_group.value_counts().plot(kind='bar')
plt.show()

plt.figure(figsize=(20,10))
plt.title('Age 40~49')
sns.countplot(x='class_name',hue='rating_group',palette=['#7777DD','#CC6666'],data=age_40_49)
plt.show()

"""### Age 50~59"""

age_50_59 = df[df.age_group == '50~59']

plt.figure(figsize=(20,10))
plt.title('Age 50~59')
sns.countplot(x='class_name',hue='rating_group',data=age_50_59,palette=['#CC6666','#7777DD'])
plt.show()

"""### Age 60~69"""

age_60_69 = df[df.age_group == '60~69']

df.rating_group.value_counts().plot(kind='bar',figsize=(10,8))

plt.figure(figsize=(20,10))
plt.title('Age 60~69')
sns.countplot(x='class_name',hue='rating_group',data=age_60_69,palette=['#7777DD','#CC6666'])
plt.show()

"""### Age 70+"""

age_over_70 = df[df.age_group == '70+']

age_over_70.rating_group.value_counts().plot(kind='bar',figsize=(10,8))

plt.figure(figsize=(20,10))
plt.title('Age 70+')
sns.countplot(x='class_name',hue='rating_group',data=age_over_70,palette=['#7777DD','#CC6666'])
plt.show()

"""## Most purchase class """

df.class_name.value_counts().sort_values(ascending=True).plot.barh(figsize=(10,8))

"""### Dress is most purchase clothing

# Top 30 clothing in Dataset
"""

most_popular_product = df.groupby(['department_name','class_name','clothing_id'],as_index=False).size().sort_values('size',ascending=False).rename(columns={'size':'purchase'})

plt.figure(figsize=(15,10))
sns.barplot(x='clothing_id',y='purchase',data=most_popular_product[:30],
            order=most_popular_product[:30].sort_values('purchase',ascending=False).clothing_id)

"""### 1078 is best clothing and then following 862, 1094 clothing

### Check Recommendation system
"""

plt.figure(figsize=(10,8))
plt.title('Total age group')
sns.countplot(hue='recommend_index ',x='rating_group',data=df,palette=['#7777DD','#CC6666'])
plt.show()

"""# Negative & None Recommendation contents word cloud"""

!pip install Top2Vec

from top2vec import Top2Vec

contents = df.review_text.to_list()
model = Top2Vec(documents=contents,workers=-1)
model.get_num_topics()

topic_words, word_scores, topic_nums = model.get_topics(2)

topic_words

for topic in topic_nums:
    model.generate_topic_wordcloud(topic)